# Déclenche le pipeline lorsqu'un commit est poussé sur la branche azure-pipelines
trigger:
  branches:
    include:
      - azure-pipelines

# Définition des ressources externes (ici un dépôt GitHub)
resources:
  repositories:
    - repository: GitHub   # alias interne utilisé pour ce repo
      type: github          # type de ressource : GitHub
      name: kaoutheeramdouni/Site5g-PFE   # chemin complet du repo
      ref: refs/heads/azure-pipelines     # branche suivie
      endpoint: GitHub      # connexion de service GitHub dans Azure DevOps

# Définition du pool d’agents utilisé
pool:
  name: 'Default'  # agent pool self-hosted appelé "Default"

#Variables globales utilisées dans le pipeline
variables:
  imageName: 'site5g'                 # nom logique de l’image
  imageTag: '$(Build.BuildId)'        # tag basé sur l’ID de build généré automatiquement

#Début des étapes du pipeline
steps:

# Récupération du code source depuis GitHub
- checkout: GitHub
  displayName: 'Checkout GitHub repository'

# 2 Construction de l’image Docker
- task: Docker@2
  displayName: 'Build Docker Image'
  inputs:
    containerRegistry: 'acr-test'                 # registre de conteneurs configuré
    repository: 'kaoutheeramdouni/site5g'         # repository cible dans le registre
    command: 'build'                              # commande Docker = build
    dockerfile: 'Dockerfile'                      # chemin vers le Dockerfile
    buildContext: '.'                             # contexte de build = répertoire courant
    tags: |
      $(imageTag)                                 

# 3 Publication de l’image Docker dans le registre
- task: Docker@2
  displayName: 'Push Docker Image'
  inputs:
    containerRegistry: 'acr-test'                 # même registre utilisé
    repository: 'kaoutheeramdouni/site5g'         # même repository que précédemment
    command: 'push'                               # commande Docker = push
    tags: |
      $(imageTag)                                 # on pousse l’image taguée

# 4️ Déploiement de l’application sur AKS Engine
- task: Kubernetes@1
  displayName: 'Deploy to AKS Engine'
  inputs:
    connectionType: 'Kubernetes Service Connection'   # type de connexion
    kubernetesServiceEndpoint: 'AKS Engine'           # connexion configurée vers AKS Engine
    namespace: 'default'                              # namespace cible du cluster
    command: 'apply'                                  # commande kubectl = apply
    useConfigurationFile: true                        # on utilise un fichier YAML
    configuration: 'K8s/deployment.yaml'              # chemin du fichier de déploiement
